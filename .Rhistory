ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = TrainingTimesLastYear)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = WorkLifeBalance)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsAtCompany)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsInCurrentRole)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsSinceLastPromotion)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsWithCurrManager)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = OverTime)) +
geom_boxplot()
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
#Set Survey Integers as Factors to run auto NB function
#Create New Dataset to Play with
DFTrainRelFacs <- DFTrainRel
DFTrainRelFacs$Education <- as.factor(DFTrainRelFacs$Education)
DFTrainRelFacs$EnvironmentSatisfaction <- as.factor(DFTrainRelFacs$EnvironmentSatisfaction)
DFTrainRelFacs$JobInvolvement <- as.factor(DFTrainRelFacs$JobInvolvement)
DFTrainRelFacs$JobLevel <- as.factor(DFTrainRelFacs$JobLevel)
DFTrainRelFacs$JobSatisfaction <- as.factor(DFTrainRelFacs$JobSatisfaction)
DFTrainRelFacs$NumCompaniesWorked <- as.factor(DFTrainRelFacs$NumCompaniesWorked)
DFTrainRelFacs$PerformanceRating <- as.factor(DFTrainRelFacs$PerformanceRating)
DFTrainRelFacs$RelationshipSatisfaction <- as.factor(DFTrainRelFacs$RelationshipSatisfaction)
DFTrainRelFacs$StockOptionLevel <- as.factor(DFTrainRelFacs$StockOptionLevel)
DFTrainRelFacs$TrainingTimesLastYear <- as.factor(DFTrainRelFacs$TrainingTimesLastYear)
DFTrainRelFacs$WorkLifeBalance <- as.factor(DFTrainRelFacs$WorkLifeBalance)
#Fitting the Naive Bayes model
Naive_Bayes_Model=naiveBayes(Attrition ~., data=DFTrainRelFacs)
#What does the model say? Print the model summary
Naive_Bayes_Model
DFTrainRelFacs$AttInt <- as.integer(DFTrainRelFacs$Attrition)
DFTrainRelFacs$AttInt2 <- c(1)
DFTrainRelFacs$AttInt <- DFTrainRelFacs$AttInt - DFTrainRelFacs$AttInt2
model1 <- glm(formula = AttInt ~ ., family = binomial(link = "logit"), data = DFTrainRelFacs)
summary(model1)
#Percentage Analysis
AttrY <- DFTrainRel[grep("Yes", DFTrainRel$Attrition), ]
AttrN <- DFTrainRel[grep("No", DFTrainRel$Attrition), ]
pAttrY <- dim(AttrY)[1] / (dim(AttrY)[1] + dim(AttrN)[1])
pAttrN <- 1 - pAttrY
#OverTime
pOTYGivenAttY <- length(grep("Yes",AttrY$OverTime))/dim(AttrY)[1]
pOTYGivenAttN <- length(grep("Yes",AttrN$OverTime))/dim(AttrN)[1]
#Environment Satisfaction
pES1GivenAttY <- length(grep(1,AttrY$EnvironmentSatisfaction))/dim(AttrY)[1]
pES1GivenAttN <- length(grep(1,AttrN$EnvironmentSatisfaction))/dim(AttrN)[1]
pES2GivenAttY <- length(grep(2,AttrY$EnvironmentSatisfaction))/dim(AttrY)[1]
pES2GivenAttN <- length(grep(2,AttrN$EnvironmentSatisfaction))/dim(AttrN)[1]
pES3GivenAttY <- length(grep(3,AttrY$EnvironmentSatisfaction))/dim(AttrY)[1]
pES3GivenAttN <- length(grep(3,AttrN$EnvironmentSatisfaction))/dim(AttrN)[1]
pES4GivenAttY <- length(grep(4,AttrY$EnvironmentSatisfaction))/dim(AttrY)[1]
pES4GivenAttN <- length(grep(4,AttrN$EnvironmentSatisfaction))/dim(AttrN)[1]
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(FSelector)
install.packages('FSelector')
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(FSelector)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(FSelector)
install.packages("FSelector")
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(FSelector)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(GGally)
install.packages("GGally")
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(GGally)
#set working directory for local computer
#REPRODUCIBLE TIP - CHANGE THIS WORKING DIRECTORY FOR YOUR REPRODUCTION ENVIRONMENT
PATH <- "/Users/Chase/Desktop/MSDS/CaseStudy2data.csv"
PATH2 <- "/Users/Chase/Desktop/MSDS/CaseStudy2Validation.csv"
CS2Data <- read.csv(PATH, header = TRUE) #import HR Data into CS2Data dataframe
CS2Val <- read.csv(PATH2, header = TRUE) #import HR Validation Set into CS2Val dataframe
EmptyCols <- colSums(is.na(DFTrain))#Check for NA - zero NA fields
#Remove columns that are irrelevant or have only one value
#Feel free to clean this ugliness
#This was the cleanest way I knew to get rid of several specific columns not next to each other
DFTrainRel <- DFTrain[,-10] #remove Employee Count
DFTrainRel <- DFTrainRel[,-22] #remove Over18 - always Yes
DFTrainRel <- DFTrainRel[,-26] #remove StandardHours - always 80
DFTrainRel <- DFTrainRel[,-34] #remove Rand
DFTrainRel <- DFTrainRel[,-10] #remove Employee Number
#Make test and train the same
DFValRel <- DFVal[,-10] #remove Employee Count
DFValRel <- DFValRel[,-22] #remove Over18
DFValRel <- DFValRel[,-26] #remove StandardHours
DFValRel <- DFValRel[,-34] #remove Rand
DFValRel <- DFValRel[,-10] #remove Employee Number
#DFTrainRel <- within(DFTrainRel, {
#  Gender.Ch <- C(Gender, treatment)
#  print(attributes(Gender.Ch))
#})
#DFTrainRel <- within(DFTrainRel, {
#  OverTime.Ch <- C(OverTime, treatment)
#  print(attributes(OverTime.Ch))
#})
## The following plots compare Income rates given with Attrition
g1 <- ggplot(DFTrainRel, aes(x = MonthlyIncome, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g2 <- ggplot(DFTrainRel, aes(x = MonthlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g3 <- ggplot(DFTrainRel, aes(x = HourlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g4 <- ggplot(DFTrainRel, aes(x = DailyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
OTg <- ggplot(DFTrainRel, aes(x = OTInt, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
## Box Plot of Job Roles compared to OT grouped by Attrition
DFTrainRel$OTInt <- as.integer(DFTrainRel$OverTime)
OTg2 <- ggplot(DFTrainRel, aes(x = JobRole, y = OTInt, fill = Attrition)) + geom_bar(stat = "identity") + scale_fill_manual(values = c("#386cb0", "#ffa500")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_flip()
grid.arrange(g1, g2, g3, g4, OTg, OTg2, ncol = 2, nrow = 3)
## Total Counts of Attrition Yes VS No
g6 <- ggplot(DFTrainRel, aes(x = Attrition)) + geom_histogram(stat="count", position = "stack", fill = c("#386cb0","#ffa500"))
## Distance from home related to Attrition Density
g1 <- ggplot(DFTrainRel, aes(x = DistanceFromHome, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Job Satisfaction related to Attrition Density
g2 <- ggplot(DFTrainRel, aes(x = JobSatisfaction, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Percentage of Salary Hike related to Attrition Density
g3 <- ggplot(DFTrainRel, aes(x = PercentSalaryHike, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Environment Satisfaction related to Attrition Density
g4 <- ggplot(DFTrainRel, aes(x = EnvironmentSatisfaction, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Work Life Balance related to Attrition Density
g7 <- ggplot(DFTrainRel, aes(x = WorkLifeBalance, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Years at the company related to Attrition Density
g8 <- ggplot(DFTrainRel, aes(x = YearsAtCompany, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
grid.arrange(g1, g2, g3, g4, g7, g8, ncol = 2, nrow = 3)
## Count of Attrition Stacked by Job Role
g5 <- ggplot(DFTrainRel, aes(x = JobRole, fill = Attrition)) + geom_histogram(stat="count", position = "stack") + scale_fill_manual(values = c("#386cb0", "#ffa500")) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Box Plot of Job Roles compared to Monthly Income grouped by Attrition
ggplot(DFTrainRel, aes(JobRole, MonthlyIncome,  fill = Attrition)) + geom_boxplot(alpha = 0.5) + coord_flip() + scale_fill_manual(values = c("#386cb0", "#ffa500"))
grid.arrange(g5, g6, ncol = 2, nrow = 1)
plot_str(CS2Data)
plot_histogram(CS2Data)
#Boxplots of each continuous variable against Attrition
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Age)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = JobSatisfaction)) +
geom_boxplot() #JobSatisfaction of 1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = DailyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = DistanceFromHome)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Education)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = EnvironmentSatisfaction)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Gender)) +
geom_boxplot() #EnvoronmentSatisfaction=1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = HourlyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = JobInvolvement)) +
geom_boxplot()
ggplot(data = CS2Data, mapping = aes(x = Attrition, y = JobLevel)) +
geom_boxplot()#level 1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = MonthlyIncome)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = MonthlyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = NumCompaniesWorked)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = PercentSalaryHike)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = PerformanceRating)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = RelationshipSatisfaction)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = StockOptionLevel)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = TotalWorkingYears)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = TrainingTimesLastYear)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = WorkLifeBalance)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsAtCompany)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsInCurrentRole)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsSinceLastPromotion)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsWithCurrManager)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = OverTime)) +
geom_boxplot()
DFTrainCorr <- cbind.data.frame(DFTrainRel$Attrition, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$WorkLifeBalance)
#not working
#featurePlot(x = DFTrainCorr[, 2:5], y = DFTrainCorr$Attrition, plot = "pairs",
## Add a key at the top auto.key = list(columns = 3))
DFTrain %>%
filter(Attrition == "Yes") %>%
select_if(is.numeric) %>%
cor() %>%
corrplot::corrplot()
DFTrain %>%
filter(Attrition == "No") %>%
select_if(is.numeric) %>%
cor() %>%
corrplot::corrplot()
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
Naive_Bayes_Model <- naiveBayes(Attrition ~ ., data = DFTrainRel)
Naive_Bayes_Model
NB_Prediction <- predict(Naive_Bayes_Model, DFTrainRel)
table(NB_Prediction,DFTrainRel$Attrition)
test_data <- read.csv('Desktop/NB_NB/CaseStudy2Validation.csv')
#set working directory for local computer
#REPRODUCIBLE TIP - CHANGE THIS WORKING DIRECTORY FOR YOUR REPRODUCTION ENVIRONMENT
PATH <- "/Users/Chase/Desktop/MSDS/CaseStudy2data.csv"
PATH2 <- "/Users/Chase/Desktop/MSDS/CaseStudy2Validation.csv"
DFTrain <- read.csv(PATH, header = TRUE) #import HR Data into CS2Data dataframe
DFTest <- read.csv(PATH2, header = TRUE) #import HR Validation Set into CS2Val dataframe
EmptyCols <- colSums(is.na(DFTrain))#Check for NA - zero NA fields
#Remove columns that are irrelevant or have only one value
#Feel free to clean this ugliness
#This was the cleanest way I knew to get rid of several specific columns not next to each other
DFTrainRel <- DFTrain[,-10] #remove Employee Count
DFTrainRel <- DFTrainRel[,-22] #remove Over18 - always Yes
DFTrainRel <- DFTrainRel[,-26] #remove StandardHours - always 80
DFTrainRel <- DFTrainRel[,-34] #remove Rand
DFTrainRel <- DFTrainRel[,-10] #remove Employee Number
#Make test and train the same
DFValRel <- DFVal[,-10] #remove Employee Count
DFValRel <- DFValRel[,-22] #remove Over18
DFValRel <- DFValRel[,-26] #remove StandardHours
DFValRel <- DFValRel[,-34] #remove Rand
DFValRel <- DFValRel[,-10] #remove Employee Number
#DFTrainRel <- within(DFTrainRel, {
#  Gender.Ch <- C(Gender, treatment)
#  print(attributes(Gender.Ch))
#})
#DFTrainRel <- within(DFTrainRel, {
#  OverTime.Ch <- C(OverTime, treatment)
#  print(attributes(OverTime.Ch))
#})
## The following plots compare Income rates given with Attrition
g1 <- ggplot(DFTrainRel, aes(x = MonthlyIncome, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g2 <- ggplot(DFTrainRel, aes(x = MonthlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g3 <- ggplot(DFTrainRel, aes(x = HourlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g4 <- ggplot(DFTrainRel, aes(x = DailyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
OTg <- ggplot(DFTrainRel, aes(x = OTInt, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
## Box Plot of Job Roles compared to OT grouped by Attrition
DFTrainRel$OTInt <- as.integer(DFTrainRel$OverTime)
OTg2 <- ggplot(DFTrainRel, aes(x = JobRole, y = OTInt, fill = Attrition)) + geom_bar(stat = "identity") + scale_fill_manual(values = c("#386cb0", "#ffa500")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_flip()
grid.arrange(g1, g2, g3, g4, OTg, OTg2, ncol = 2, nrow = 3)
## The following plots compare Income rates given with Attrition
g1 <- ggplot(DFTrainRel, aes(x = MonthlyIncome, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g2 <- ggplot(DFTrainRel, aes(x = MonthlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g3 <- ggplot(DFTrainRel, aes(x = HourlyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
g4 <- ggplot(DFTrainRel, aes(x = DailyRate, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
OTg <- ggplot(DFTrainRel, aes(x = OTInt, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#fdb462"))
## Box Plot of Job Roles compared to OT grouped by Attrition
DFTrainRel$OTInt <- as.integer(DFTrainRel$OverTime)
###OTg2 <- ggplot(DFTrainRel, aes(x = JobRole, y = OTInt, fill = Attrition)) + geom_bar(stat = "identity") + scale_fill_manual(values = c("#386cb0", "#ffa500")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_flip()
grid.arrange(g1, g2, g3, g4, OTg, ncol = 2, nrow = 3)
## Total Counts of Attrition Yes VS No
g6 <- ggplot(DFTrainRel, aes(x = Attrition)) + geom_histogram(stat="count", position = "stack", fill = c("#386cb0","#ffa500"))
## Distance from home related to Attrition Density
g1 <- ggplot(DFTrainRel, aes(x = DistanceFromHome, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Job Satisfaction related to Attrition Density
g2 <- ggplot(DFTrainRel, aes(x = JobSatisfaction, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Percentage of Salary Hike related to Attrition Density
g3 <- ggplot(DFTrainRel, aes(x = PercentSalaryHike, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Environment Satisfaction related to Attrition Density
g4 <- ggplot(DFTrainRel, aes(x = EnvironmentSatisfaction, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Work Life Balance related to Attrition Density
g7 <- ggplot(DFTrainRel, aes(x = WorkLifeBalance, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
## Years at the company related to Attrition Density
g8 <- ggplot(DFTrainRel, aes(x = YearsAtCompany, fill = Attrition)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c("#386cb0", "#ffa500"))
grid.arrange(g1, g2, g3, g4, g7, g8, ncol = 2, nrow = 3)
## Count of Attrition Stacked by Job Role
g5 <- ggplot(DFTrainRel, aes(x = JobRole, fill = Attrition)) + geom_histogram(stat="count", position = "stack") + scale_fill_manual(values = c("#386cb0", "#ffa500")) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Box Plot of Job Roles compared to Monthly Income grouped by Attrition
ggplot(DFTrainRel, aes(JobRole, MonthlyIncome,  fill = Attrition)) + geom_boxplot(alpha = 0.5) + coord_flip() + scale_fill_manual(values = c("#386cb0", "#ffa500"))
grid.arrange(g5, g6, ncol = 2, nrow = 1)
plot_str(CS2Data)
plot_histogram(CS2Data)
#Boxplots of each continuous variable against Attrition
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Age)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = JobSatisfaction)) +
geom_boxplot() #JobSatisfaction of 1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = DailyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = DistanceFromHome)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Education)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = EnvironmentSatisfaction)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = Gender)) +
geom_boxplot() #EnvoronmentSatisfaction=1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = HourlyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = JobInvolvement)) +
geom_boxplot()
ggplot(data = CS2Data, mapping = aes(x = Attrition, y = JobLevel)) +
geom_boxplot()#level 1
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = MonthlyIncome)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = MonthlyRate)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = NumCompaniesWorked)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = PercentSalaryHike)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = PerformanceRating)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = RelationshipSatisfaction)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = StockOptionLevel)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = TotalWorkingYears)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = TrainingTimesLastYear)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = WorkLifeBalance)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsAtCompany)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsInCurrentRole)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsSinceLastPromotion)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = YearsWithCurrManager)) +
geom_boxplot()
ggplot(data = DFTrainRel, mapping = aes(x = Attrition, y = OverTime)) +
geom_boxplot()
DFTrainCorr <- cbind.data.frame(DFTrainRel$Attrition, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$WorkLifeBalance)
#not working
#featurePlot(x = DFTrainCorr[, 2:5], y = DFTrainCorr$Attrition, plot = "pairs",
## Add a key at the top auto.key = list(columns = 3))
DFTrain %>%
filter(Attrition == "Yes") %>%
select_if(is.numeric) %>%
cor() %>%
corrplot::corrplot()
DFTrain %>%
filter(Attrition == "No") %>%
select_if(is.numeric) %>%
cor() %>%
corrplot::corrplot()
Naive_Bayes_Model <- naiveBayes(Attrition ~ ., data = DFTrainRel)
Naive_Bayes_Model
NB_Prediction <- predict(Naive_Bayes_Model, DFTrainRel)
table(NB_Prediction,DFTrainRel$Attrition)
NB_Test <- predict(Naive_Bayes_Model, DFValRel)
Naive_Bayes_Model <- naiveBayes(Attrition ~ ., data = DFTrainRel)
Naive_Bayes_Model
NB_Prediction <- predict(Naive_Bayes_Model, DFTrainRel)
table(NB_Prediction,DFTrainRel$Attrition)
NB_Test <- predict(Naive_Bayes_Model, DFValRel)
Naive_Bayes_Model <- naiveBayes(Attrition ~ ., data = DFTrainRel)
Naive_Bayes_Model
NB_Prediction <- predict(Naive_Bayes_Model, DFTrainRel)
table(NB_Prediction,DFTrainRel$Attrition)
NB_Test <- predict(Naive_Bayes_Model, DFValRel)
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
DFTrainRelFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
#top5 - DFTrainRel$OverTime, DFTrainRel$TotalWorkingYears, DFTrainRel$YearsAtCompany, DFTrainRel$MaritalStatus, DFTrainRel$YearsInCurrentRole
#Variables Accuracy  Kappa AccuracySD KappaSD Selected
#         4   0.8282 0.1955    0.02308 0.07625
#         8   0.8326 0.2846    0.02641 0.04974
#        16   0.8509 0.2403    0.01554 0.06693        *
#        27   0.8498 0.1529    0.01489 0.08675
rfe2 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(dplyr)
library(plyr)
library(ggplot2)
library(openintro)
library(reshape2)
library(gridExtra)
library(grid)
library(mlr)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(GGally)
DFTrainFS <- cbind.data.frame(DFTrainRel$ID, DFTrainRel$BusinessTravel, DFTrainRel$Department, DFTrainRel$Education, DFTrainRel$EducationField, DFTrainRel$EnvironmentSatisfaction, DFTrainRel$Gender, DFTrainRel$HourlyRate, DFTrainRel$JobInvolvement, DFTrainRel$JobLevel, DFTrainRel$JobRole, DFTrainRel$JobSatisfaction, DFTrainRel$MaritalStatus, DFTrainRel$MonthlyRate, DFTrainRel$NumCompaniesWorked, DFTrainRel$OverTime, DFTrainRel$PercentSalaryHike, DFTrainRel$PerformanceRating, DFTrainRel$RelationshipSatisfaction, DFTrainRel$StockOptionLevel, DFTrainRel$TotalWorkingYears, DFTrainRel$TrainingTimesLastYear, DFTrainRel$WorkLifeBalance, DFTrainRel$YearsAtCompany, DFTrainRel$YearsSinceLastPromotion, DFTrainRel$YearsWithCurrManager, DFTrainRel$YearsInCurrentRole )
DFValFS <- cbind.data.frame(DFValRel$ID, DFValRel$BusinessTravel, DFValRel$Department, DFValRel$Education, DFValRel$EducationField, DFValRel$EnvironmentSatisfaction, DFValRel$Gender, DFValRel$HourlyRate, DFValRel$JobInvolvement, DFValRel$JobLevel, DFValRel$JobRole, DFValRel$JobSatisfaction, DFValRel$MaritalStatus, DFValRel$MonthlyRate, DFValRel$NumCompaniesWorked, DFValRel$OverTime, DFValRel$PercentSalaryHike, DFValRel$PerformanceRating, DFValRel$RelationshipSatisfaction, DFValRel$StockOptionLevel, DFValRel$TotalWorkingYears, DFValRel$TrainingTimesLastYear, DFValRel$WorkLifeBalance, DFValRel$YearsAtCompany, DFValRel$YearsSinceLastPromotion, DFValRel$YearsWithCurrManager, DFValRel$YearsInCurrentRole )
#TrainAttrition <- as.integer(DFTrainRel$Attrition)-1
#TestAttrition <- as.integer(DFValRel$Attrition)-1
TrainAttrition <- DFTrainRel$Attrition
TestAttrition <- DFValRel$Attrition
ctrl <- rfeControl(functions = nbFuncs)
rfe1 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS, testy = TestAttrition)
#top5 - DFTrainRel$OverTime, DFTrainRel$TotalWorkingYears, DFTrainRel$YearsAtCompany, DFTrainRel$MaritalStatus, DFTrainRel$YearsInCurrentRole
#Variables Accuracy  Kappa AccuracySD KappaSD Selected
#         4   0.8282 0.1955    0.02308 0.07625
#         8   0.8326 0.2846    0.02641 0.04974
#        16   0.8509 0.2403    0.01554 0.06693        *
#        27   0.8498 0.1529    0.01489 0.08675
rfe2 <- rfe(x=DFTrainRelFS, y=TrainAttrition, sizes = 2^(2:27), metric = "Accuracy" , rfeControl = ctrl, testx = DFValFS)
